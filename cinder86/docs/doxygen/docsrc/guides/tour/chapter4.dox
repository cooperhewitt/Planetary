/*! \page helloCinderChapter4 Chapter 4: Fine tuning
\section breakingFree Moving the Particles off the grid
I don't know about you, but I am getting tired of this grid format. Particles weren't designed to be stationary. Our particles want to roam. It is time to cut them free from their grid tethers.\n
\n
As I mentioned early on, the \c Particle is just a holder for data. Not just any data. The \c Particle class holds the data that describes the particle itself. The location is not just any location. It is that <tt>Particle</tt>'s location. The radius is that <tt>Particle</tt>'s radius. Any data that is specific to this particle should exist inside this \c Particle and nowhere else. \n
\n
When I think of a particle, I think of a dot in space. This dot is created, it follows the rules it was assigned, it is influenced by outside forces, and eventually it dies. Let's start with the act of creating.\n
\n
In the previous section, our \c ParticleController made a few thousand <tt>Particle</tt>s right away. All the <tt>Particle</tt>s existed until the user quit the app. That will be our first change. We remove the second \c ParticleController constructor (the one that made the grid of <tt>Particle</tt>s). From now on, the user will have to use the mouse to make new <tt>Particle</tt>s.\n
\n
\section MouseParticles Creating Particles with Mouse events
We are going to need to beef up our mouse related code. First up, we will add mouseDown() and mouseUp() methods to our project. We will also make a boolean that will keep track of whether a mouse button is pressed.
\code
void mouseDown( MouseEvent event );
void mouseUp( MouseEvent event );
bool mIsPressed;
\endcode
\n
If any mouse button is pressed, mouseDown() will fire. Inside that function, all we do is set \c mIsPressed to \c true. If mouseUp() is called, \c mIsPressed will be set to \c false. Easy enough.
\code
void TutorialApp::mouseDown( MouseEvent event ) {
	mIsPressed = true;
}

void TutorialApp::mouseUp( MouseEvent event ) {
	mIsPressed = false;
}
\endcode
\n
Finally, in our App class \ref cinder::app::App::update "update()" method, we add an \c if statement that checks to see if \c mIsPressed is true. If it is, then have the \c ParticleController make some new <tt>Particle</tt>s.
\code
if( mIsPressed )
	mParticleController.addParticles( 5, mMouseLoc );
\endcode
\n
We have gone ahead and changed the \c addParticles() method in \c ParticleController to take both the number of <tt>Particle</tt>s we want as well as the location where we want to initially put them.\n
\n
You might be thinking, "Hey, wait. If we make 5 particles and place all of them at the location of the cursor, we will only see 1 particle." We remedy this situation by adding a random vector to the location when we create the new \c Particle.
\code
void ParticleController::addParticles( int amt, const Vec2i &mouseLoc ) {
	for( int i=0; i<amt; i++ ) {
		Vec2f randVec = Rand::randVec2f() * 10.0f;
		mParticles.push_back( Particle( mouseLoc + randVec ) );
	}
}
\endcode
\n
So we are making a new \c Particle at the location of the mouse, but we are also offsetting it in a random direction that has a length of \c 10.0. In other words, our 5 new <tt>Particle</tt>s will all exist on a circle that has a radius of 10.0 whose center is the cursor position.\n
\n
\section death Particle death
If we allow every \c Particle to live forever, we will very quickly start dropping frame rate as hundreds of thousands of <tt>Particle</tt>s begin to accumulate. We need to kill off <tt>Particle</tt>s every now and then. Or more accurately, we need to allow <tt>Particle</tt>s to say when they are ready to die. We do this by keeping track of a <tt>Particle</tt>'s age.\n
\n
Every \c Particle is born with an age of 0. Every frame it is alive, it adds 1 to its age. If the age is ever greater than the life expectancy, then the \c Particle dies and we get rid of it.
First, lets add the appropriate variables to our \c Particle class. We need an age, a lifespan, and a boolean that is set to true if the age ever exceeds the lifespan.
\code
int	mAge;
int	mLifespan;
bool mIsDead;
\endcode
\n
Be sure to initialize \c mAge to \c 0 and \c mLifespan to a number that makes sense for your project. We are going to allow every \c Particle to live until the age of 200. In our <tt>Particle</tt>'s \c update() method, we increment the age and then compare it to the lifespan.
\code
mAge++;
if( mAge > mLifespan )
	mIsDead = true;
\endcode
\n
Just having a \c Particle say "Im dead" is not quite enough. We need to also have the \c ParticleController clean up after the dead and remove them from the \c list of <tt>Particle</tt>s. If you look back at the \c ParticleController \c update() method, you see we are already iterating through the full list of <tt>Particle</tt>s. We can put our death-check there.
\code
for( list<Particle>::iterator p = mParticles.begin(); p != mParticles.end(); ){
	if( p->mIsDead ) {
		p = mParticles.erase( p );
	}
	else {
		p->update( channel, mouseLoc );
		++p;
	}
}
\endcode
\n
For every \c Particle in the \c list, we check to see if its \c mIsDead is \c true. If so, then \c erase() it from the \c list. Otherwise, go ahead and \c update() the \c Particle. You might notice this \c for loop is a little different than you're used to seeing. This is because we don't \em always want to increment our list iterator \c p. We only want to increment it if the particle isn't dead. Otherwise we'll set \c p to be the result of calling erase() (this is standard practice for using the STL's list class).\n
\n
Hurray, you have just made a \c Particle cursor trail.\n
\n
\image html tutorial_part4_01.png
\n
\section velocity Particle velocity
Up until now, our <tt>Particle</tt>s have been stationary. We did do some position perturbations in the last section, but the location of the \c Particle (\c mLoc) never changed. It is time to remedy this. We are going to finally make use of velocity. \n
\n
Velocity is the speed that something moves multiplied by the direction that something is moving. You can add velocity to position to get the new position. If velocity never changes, then the \c Particle will move in a straight line. That will be our first test case with Velocity.\n
\n
It is incredibly simple, really. All you need is one additional \ref cinder::Vec2 "Vec2f" in your \c Particle. We will call it \c mVel. When you initialize \c mVel, you set it equal to a random 2D vector.
\code
mVel	 = Rand::randVec2f();
\endcode
\n
Since we are going to deal with constant velocity, we can just leave it at that. Each \c Particle, when it is created, is assigned a random velocity. To make the \c Particle obey that velocity, you add it to the location.
\code
mLoc += mVel;
\endcode
\n
When you run the project, as you click and drag you will create a trail of <tt>Particle</tt>s that move away from their point of creation at a constant speed until they die.\n
\n
\image html tutorial_part4_02.png
\n
Perhaps you don't want them to move forever. Maybe you just want them to exhibit a burst of velocity at birth but that velocity will trail off until the \c Particle isn't moving at all. To accomplish that, you simply multiply the velocity with a number less than 1.0. This is referred to as the rate of decay which we will call \c mDecay. 
\code
mLoc += mVel;
mVel *= mDecay;
\endcode
\n
As you can see, if we set \c mDecay to \c 1.0, the velocity will show no change over time. If we use a number greater than \c 1.0, the velocity will increase exponentially to infinity. This is why we try to keep the rate of decay less than \c 1.0. It is far more desirable a feature to have something slow to a stop than to have something speed up to infinity. But this is just a personal choice... feel free to go crazy!\n
\n
I am going to interject here for a moment and fix something that has been annoying me. As it stands, all the <tt>Particle</tt>s created in any given frame disappear at the same time. It feels rigid and obvious so lets use a little randomness to get us something more organic.
\code
mLifespan = Rand::randInt( 50, 250 );
\endcode
\n
There, all better. Now the <tt>Particle</tt>s die at different rates. Moving on.\n
\n
Another aesthetic trick that is useful with <tt>Particle</tt>s is to pay attention to the ratio of <tt>mAge/mLifespan</tt>. Or in many cases, <tt>1.0 - mAge/mLifespan</tt>. Say, for example, you want to make the <tt>Particle</tt>s shrink out of existence instead of just disappearing. If you have a number from 1.0 to 0.0 that represents how old it is in relation to how old it is allowed to get, you can multiply the radius by that age percentage to make the \c Particle fade away as it dies.
\code
float agePer = 1.0f - ( mAge / (float)mLifespan );
mRadius = 3.0f * agePer;
\endcode
\n
\image html tutorial_part4_03.png
\n
This is another tiny trick that has a surprisingly effective result. We currently have a scenario where it seems <tt>Particle</tt>s are coming out of the mouse cursor. We can really push this effect by setting the initial velocity of the \c Particle to be equal to the velocity of the cursor. This will make it seem like <tt>Particle</tt>s are being thrown from the cursor instead of just being passively deposited.\n
\n
Every frame, we are going to subtract the previous location of the cursor from the current location of the cursor in order to find the cursor's velocity. Once we have the cursor velocity, we can pass it to each \c Particle (like we do with the \c mouseLoc) and initialize the <tt>Particle</tt>'s \c mVel with this new mouse-made velocity.\n
\n
If you go ahead and do this, you will probably find the results a little annoying. The <tt>Particle</tt>s appear and move in awkward clumps. There are two things we can do to fix this.\n
\n
1) We don't actually want the initial velocity to be the same as the mouse. Once tested, the initial movement feels to fast. It looks much better if we multiply it by .25.
\code
void ParticleController::addParticles( int amt, const Vec2i &mouseLoc, const Vec2f &mouseVel ) {
	for( int i=0; i<amt; i++ ) {
		Vec2f loc = mouseLoc + Rand::randVec2f() * 10.0f;
		Vec2f vel = mouseVel * 0.25f;
		mParticles.push_back( Particle( p, v ) );
	}
}
\endcode
\n
2) We should add a random vector with a random speed to our cursor velocity in order to make the <tt>Particle</tt>s spread out a little more. Otherwise, every frame our cursor will make a few new <tt>Particle</tt>s and send them all traveling in the same direction.
\code
Vec2f velOffset = Rand::randVec2f() * Rand::randFloat( 1.0f, 3.0f );
Vec2f vel = mouseVel * 0.25f + velOffset;
\endcode
\n
What you have just seen is pretty much my entire coding process. Run the code. Find something that doesn't quite feel right. Tweak it. Repeat. An endless cycle of trying to make things slightly better. In keeping with this sentiment, I just noticed that the <tt>Particle</tt>s shouldn't all decay at the same rate. Time to make that randomized as well.
\code
mDecay			= Rand::randFloat( 0.95f, 0.99f );
\endcode
\n
\section perlin Enter Perlin noise
Oh man, how I LOVE \ref cinder::Perlin "Perlin" noise. When used sparingly, \ref cinder::Perlin "Perlin" noise can add some magic to your \c Particle systems. But be aware, it is very easy to overuse and abuse \ref cinder::Perlin "Perlin" noise. Subtlety is key.\n
\n
What is \ref cinder::Perlin "Perlin" noise? Wikipedia can give you a <a href="http://en.wikipedia.org/wiki/Perlin_noise">very thorough answer</a> to that question. In short, \ref cinder::Perlin "Perlin" noise is a smoothly interpolated, easily controllable random number generator. One of the cool things about it is that \ref cinder::Perlin "Perlin" noise can be defined in 1D, 2D, 3D or 4D, and it will always give us back a consistent value for a particular location. Cinder has a built-in implementation, and here it is:
\code
mPerlin = Perlin();
\endcode
\n
Don't forget to <tt>\#include "cinder/Perlin.h"</tt>. Now that we have an instance of \ref cinder::Perlin "Perlin", we need to pass it along to our <tt>Particle</tt>s so they can make use of it. You will do that the same way you passed the \ref cinder::ChannelT "Channel" to each \c Particle.\n
\n
Once the \c Particle has the \ref cinder::Perlin "Perlin" reference, you can use the <tt>Particle</tt>'s location as an input and get back a float, or if you choose you can get back a \ref cinder::Vec2 "Vec2f" or \ref cinder::Vec3 "Vec3f" but that is a bit more time consuming. We are going to stick with just getting back a single float per \c Particle.
\code
float noise = perlin.fBm( Vec3f( mLoc * 0.005f, app::getElapsedSeconds() * 0.1f ) );
\endcode
\n
First, what the hell is \ref cinder::Perlin::fBm() "fBm()", right? That stands for fractional Brownian motion. Google it! But in our case it's just the function we call to get a noise value for a particular location. Second, whats with the weird \ref cinder::Vec3 "Vec3f" made of only two parameters? Let me break it into a slightly different version to make it easier to see what I am doing.
\code
float nX = mLoc.x * 0.005f;
float nY = mLoc.y * 0.005f;
float nZ = app::getElapsedSeconds() * 0.1f;
Vec3f v( nX, nY, nZ );
float noise = perlin.fBm( v );
\endcode
\n
The reason I am sending a 3D vector to \ref cinder::Perlin "Perlin" is that I am interested in getting back the result based on the Particle's position \e and time. As time passes, even if the \c Particle is stationary (meaning that the first two parameters in the noise calculation are not changing), the \ref cinder::Perlin "Perlin" noise will continue to animate.\n
\n
So what do we do with that noise? Since we are dealing with <tt>Particle</tt>s that are moving in a 2D space, we could treat the noise like an angle and use \c sin(angle) and \c cos(angle) to get an x and y offset for our \c Particle. Since the noise smoothly changes, our resulting angle will also smoothly change which means our <tt>Particle</tt>s wont end up moving along a jagged path.
\code
float angle = noise * 15.0f;
mVel += Vec2f( cos( angle ), sin( angle ) );
mLoc += mVel;
\endcode
\n
\ref cinder::Perlin "Perlin" \c fBm() returns a value between \c -1.0f and \c 1.0f. We chose to multiply that result by \c 15.0f to keep the \c Particle from favoring a specific direction. If that multiplier is too small, you will find that the <tt>Particle</tt>'s will all generally move to the right. We want our <tt>Particle</tt>s to move all over, hence the \c 15.0f.\n
\n
The math geeks will note that <tt>noise * 15.0f</tt> will give you a possible range of \c 30.0, and we all know there are only 2 \htmlonly &pi; \endhtmlonly or 6.28318 radians in a circle, So why not multiply \c noise by \htmlonly &pi; \endhtmlonly which will give us a range of 2 \htmlonly &pi; \endhtmlonly? Even though \ref cinder::Perlin "Perlin" results will stay within the \c -1.0f to \c 1.0f range, this doesn't guarantee the results will give you an even distribution in that range. Often, you will find the \ref cinder::Perlin "Perlin" results stay between \c -0.25f to \c 0.25f. If we simply multiply the \c noise by \htmlonly &pi; \endhtmlonly (creating a range from -\htmlonly &pi; \endhtmlonly to \htmlonly &pi; \endhtmlonly), we will get randomized movement that appears to favor a specific direction. The way to avoid this is to spread the result out into a greater range. You should play around with these numbers to get a better idea of what I mean.\n
\n
What does it look like? Well, it looks like \ref cinder::Perlin "Perlin" noise.\n
\n
\image html tutorial_part4_04.png
\n
In fact, it looks a little too much like \ref cinder::Perlin "Perlin". This is what we were alluding to earlier in this section when we mentioned that subtlety is key. This effect, though pretty, looks like everyone else's \ref cinder::Perlin "Perlin" effect. Don't believe me? Do a Google image search for <a href="http://images.google.com/images?hl=en&q=perlin%20noise%20flow%20field&um=1&ie=UTF-8&sa=N&tab=wi">Perlin noise flow field</a> and you will see plenty of experiments that look just like this. Lets tone it back a bit.
\code
mVel += noiseVector * 0.2f * ( 1.0f - agePer );
\endcode
\n
We also threw in the <tt>( 1.0f - agePer )</tt> because we want the \ref cinder::Perlin "Perlin" influence to be nonexistent at the <tt>Particle</tt>'s creation and have it grow stronger as the \c Particle ages. This creates a nice effect in which the <tt>Particle</tt>s push away from the cursor and as they dwindle in size they dance about more and more until they vanish.\n
\n
Sadly, this is not that exciting as a still image. We need to make a video. You'll notice these lines at the bottom of TutorialApp::%draw().
\code
if( mSaveFrames ){
	writeImage( getHomeDirectory() + "image_" + toString( getElapsedFrames() ) + ".png",
					copyWindowSurface() );
}
\endcode
\n
This makes use of the Cinder function writeImage(), which takes a file path as its first parameter, and an image as its second. In our case we'll want to use the built-in function copyWindowSurface(), which returns the window as a \ref cinder::SurfaceT "Surface". You can also pass writeImage() things like a \ref cinder::gl::Texture "gl::Texture". You'll also notice the use of the function toString(), which is a handy function in Cinder which can take anything you can pass to console(), which includes all the C++ default types as well as many of the Cinder classes, and return it in string form. So this call will send a sequence of images to your home directory, each named <em>image_<b>frame#</b>.png</em>. The resulting sequence of images can be assembled in QuickTime or pretty much any video program.
\Movie{tutorial_part4_01.mov,800,620}
\n
The next chapter is quite exciting. We are going to show how to let the <tt>Particle</tt>s interact with each other. Head on over to \ref helloCinderChapter5 "Chapter 5".\n
\n
*/
